#!/bin/bash

PROJECTNAMEMARKER="_PROJECTNAME_"
DESCRIPTIONMARKER="_DESCRIPTION_"
EMAILMARKER="_EMAIL_"
AUTHORMARKER="_AUTHOR_"
LICENSEMARKER="_LICENSE_"
YEARMARKER="_YEAR_"
TEMPLATEDIR=~/.config/plate/templates

YEAR=$(date +"%Y")

version()
{
    echo "$(basename ${BASH_SOURCE[0]}) 0.1.0"
}

help()
{
    version
    echo "A template management solution"
    echo ""
    echo "USAGE:"
    echo -e "\t$(basename ${BASH_SOURCE[0]}) [OPTIONS] TEMPLATE OUTPUTDIR"
    echo ""
    echo "OPTIONS:"
    echo -e "\t-l\tList available templates"
    echo -e "\t-p\tSet project name"
    echo -e "\t-d\tSet description text"
    echo -e "\t-e\tSet email text"
    echo -e "\t-a\tSet author name"
    echo -e "\t-L\tSet license"
    echo -e "\t-V\tShow version information"
}

list()
{
    # list the available template
    if [ -d ${TEMPLATEDIR} ]; then
        cd ${TEMPLATEDIR}
        ls -d */ | cut -f1 -d'/'
    else
        echo "Template directory: ${TEMPLATEDIR} does not exist"
    fi
}

while getopts "Vlp:d:e:a:L:" arg; do
    case $arg in
        v) 
            version
            exit
            ;;
        l)
            list
            exit
            ;;
        p)
            PROJECTNAME=$OPTARG
            ;;
        d)
            DESCRIPTION=$OPTARG
            ;;
        e)
            EMAIL=$OPTARG
            ;;
        a)
            AUTHOR=$OPTARG
            ;;
        l)
            LICENSE=$OPTARG
            ;;
        ?)
            help
            exit
            ;;
    esac
done

TEMPLATENAME=${@:$OPTIND:1}
OUTPUTDIR=${@:$OPTIND+1:1}

if [ -z ${TEMPLATENAME} ] || [ -z ${OUTPUTDIR} ]; then
    echo "Not enough args"
    help
    exit 1
fi

if [ -d ${OUTPUTDIR} ]; then
    echo "Directory: ${OUTPUTDIR} already exists!"
    exit 1
fi

TEMPLATE=${TEMPLATEDIR}/${TEMPLATENAME}
if [ ! -d ${TEMPLATE} ]; then
    echo "No such template"
    exit 1
fi

if [ -z "${PROJECTNAME}" ]; then
    echo "Setting default Project Name"
    PROJECTNAME="project"
fi
if [ -z "${DESCRIPTION}" ]; then
    echo "Setting default description"
    DESCRIPTION="Add description here"
fi
if [ -z "${EMAIL}" ]; then
    echo "Setting default email"
    EMAIL="john.smith@gmail.com"
fi
if [ -z "${AUTHOR}" ]; then
    echo "Setting default username"
    AUTHOR="John Smith"
fi
if [ -z "${LICENSE}" ]; then
    echo "Setting default license MIT"
    LICENSE="MIT"
fi

cp -r ${TEMPLATE} ${OUTPUTDIR}

cd ${OUTPUTDIR}

# substitute the markers in the project with the given data
find . -type f | xargs fgrep -l "${PROJECTNAMEMARKER}" | xargs sed -i "s/${PROJECTNAMEMARKER}/${PROJECTNAME}/g" > /dev/null 2>&1
find . -type f | xargs fgrep -l "${DESCRIPTIONMARKER}" | xargs sed -i "s/${DESCRIPTIONMARKER}/${DESCRIPTION}/g" > /dev/null 2>&1
find . -type f | xargs fgrep -l "${EMAILMARKER}" | xargs sed -i "s/${EMAILMARKER}/${EMAIL}/g" > /dev/null 2>&1
find . -type f | xargs fgrep -l "${AUTHORMARKER}" | xargs sed -i "s/${AUTHORMARKER}/${AUTHOR}/g" > /dev/null 2>&1
find . -type f | xargs fgrep -l "${YEARMARKER}" | xargs sed -i "s/${YEARMARKER}/${YEAR}/g" > /dev/null 2>&1

# in projects where there is the concept of "modules" we need to rename the
# _PROJECTNAME_ directory to the project name
MODULEDIR=$(find . -type d -name ${PROJECTNAMEMARKER})
if [[ ${MODULEDIR} != "" ]]; then
    cd $(dirname ${MODULEDIR})
    mv $(basename ${MODULEDIR}) ${PROJECTNAME}
fi

